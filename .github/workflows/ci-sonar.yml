name: Continuous Integration Pipeline with SonarQube

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # better relevance for Sonar analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build the application (optional)
        run: |
          npm run build 2>/dev/null || echo "No build script found, skipping build step"

      - name: Run unit tests with coverage and JUnit reports
        continue-on-error: true
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: |
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          else
            npx --yes jest --ci --passWithNoTests \
              --reporters=default --reporters=jest-junit \
              --coverage --testLocationInResults
          fi

      - name: Publish test results to Checks
        if: always() && hashFiles('coverage/junit.xml') != ''
        uses: dorny/test-reporter@v1
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: false

      - name: Upload test results to GitHub
        if: always() && hashFiles('coverage/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}   # e.g. http://4.219.9.145:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=waf-node-app
            -Dsonar.sources=.
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Create deployment package
        run: |
          set -euo pipefail
          STAGING="$GITHUB_WORKSPACE/deployment-package"
          rm -rf "$STAGING"
          mkdir -p "$STAGING"
          [ -d public ] && cp -r public "$STAGING/" || true
          [ -d node_modules ] && cp -r node_modules "$STAGING/" || true
          [ -f server.js ] && cp server.js "$STAGING/" || true
          cp package.json "$STAGING/"
          cp package-lock.json "$STAGING/" || true
          [ -f README.md ] && cp README.md "$STAGING/" || true
          [ -f Dockerfile ] && cp Dockerfile "$STAGING/" || true
          (cd "$STAGING" && npm pkg delete devDependencies || true)
          TS="$(date +%Y%m%d-%H%M%S)"
          SHORT_SHA="${GITHUB_SHA::7}"
          ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
          (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Upload deployment package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-node-${{ github.run_number }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 90
